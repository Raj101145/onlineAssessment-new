@model OnlineAssessment.Web.Models.CategoryQuestions

@{
    ViewData["Title"] = "Upload Category Questions";
}

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <h2>Upload Category Questions</h2>
        </div>
        <div class="card-body">
            <div class="alert alert-info">
                <i class="fas fa-info-circle"></i> Upload question sets for specific categories. These questions will be available when creating tests for the selected category.
                <p class="mt-2 mb-0">
                    <strong>Note:</strong> Each question set must contain at least 60 questions.
                </p>
                <p class="mt-2 mb-0">
                    <a href="/samples/category_questions_sample.json" target="_blank" class="alert-link">
                        <i class="fas fa-download"></i> Download sample JSON file
                    </a>
                </p>
            </div>

            <div class="form-group mb-4">
                <label for="category" class="form-label">Category</label>
                <select class="form-select" id="category" name="category" required>
                    <option value="">Select Category</option>
                    <option value="BFSI Internship">BFSI Internship</option>
                    <option value="Digital Marketing  Internships">Digital Marketing  Internships</option>
                    <option value="IT Internships">IT Internships</option>
                    <option value="Relationship Executive Internships">Relationship Executive Internships</option>
                    <option value="Business Development Internships">Business Development Internships</option>
                    <option value="Sales Internships">Sales Internships</option>
                    <option value="Portfolio Internships">Portfolio Internships</option>
                    <option value="Web Development Internships">Web Development Internships</option>
                    <option value="Software Development Internships">Software Development Internships</option>
                </select>
                <small class="form-text">Select the category for this question set.</small>
            </div>

            <div class="question-card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-file-upload"></i> Upload Questions</h5>
                </div>
                <div class="card-body">
                    <div id="questionsUpload">
                        <div class="file-upload-wrapper">
                            <div class="file-upload-label">
                                <div class="file-upload-text">
                                    <div class="file-upload-icon">
                                        <i class="fas fa-file-upload"></i>
                                    </div>
                                    <h5>Upload Questions</h5>
                                    <p>Drag and drop your JSON file here or click to browse</p>
                                    <div class="file-name" id="fileName"></div>
                                </div>
                            </div>
                            <input type="file" class="file-upload-input" id="questionsFile" accept=".json">
                        </div>
                        <div class="d-flex justify-content-end mt-3">
                            <button class="btn btn-primary" type="button" id="uploadQuestionsBtn">
                                <i class="fas fa-upload"></i> Upload Questions
                            </button>
                        </div>
                        <div id="uploadStatus" class="alert mt-3 d-none"></div>
                    </div>
                </div>
            </div>

            <div class="d-grid gap-3 mt-4">
                <a href="@Url.Action("Index", "CategoryQuestions")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Category Questions
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // File upload display
        document.getElementById('questionsFile').addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                const fileName = file.name || 'No file selected';
                document.getElementById('fileName').textContent = fileName;
            }
        });

        // Upload questions
        document.getElementById('uploadQuestionsBtn').addEventListener('click', async function() {
            const fileInput = document.getElementById('questionsFile');
            const file = fileInput.files[0];
            const category = document.getElementById('category').value;
            const statusElement = document.getElementById('uploadStatus');

            if (!category) {
                showToast('Please select a category', 'warning');
                return;
            }

            if (!file) {
                showToast('Please select a file to upload', 'warning');
                return;
            }

            try {
                // Validate the file content
                const fileReader = new FileReader();
                fileReader.onload = async function(e) {
                    try {
                        const fileContent = e.target.result;
                        const questionsData = JSON.parse(fileContent);

                        // Prepare questions for upload
                        let questions = [];

                        // Handle MCQ questions
                        if (questionsData.mcqQuestions) {
                            questions = questions.concat(questionsData.mcqQuestions.map(q => ({
                                ...q,
                                type: 0 // MultipleChoice
                            })));
                        }

                        if (questions.length === 0) {
                            throw new Error('No valid questions found in the file');
                        }

                        // Validate minimum question count
                        if (questions.length < 60) {
                            throw new Error(`At least 60 questions are required. Found only ${questions.length} questions.`);
                        }

                        // Upload questions
                        const response = await fetch('/api/CategoryQuestions/Upload', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                category: category,
                                questions: questions
                            })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            statusElement.className = 'alert mt-3 alert-success';
                            statusElement.textContent = result.message;
                            statusElement.classList.remove('d-none');

                            showToast('Questions uploaded successfully!', 'success');

                            // Redirect to index page after a short delay
                            setTimeout(() => {
                                window.location.href = '/CategoryQuestions/Index';
                            }, 2000);
                        } else {
                            throw new Error(result.message || 'Failed to upload questions');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        statusElement.className = 'alert mt-3 alert-danger';
                        statusElement.textContent = 'Error: ' + error.message;
                        statusElement.classList.remove('d-none');
                        showToast('Error uploading questions: ' + error.message, 'error');
                    }
                };

                fileReader.readAsText(file);
            } catch (error) {
                console.error('Error:', error);
                statusElement.className = 'alert mt-3 alert-danger';
                statusElement.textContent = 'Error: ' + error.message;
                statusElement.classList.remove('d-none');
                showToast('Error uploading questions: ' + error.message, 'error');
            }
        });

        // Toast notification function
        function showToast(message, type = 'info') {
            // Check if toast container exists, if not create it
            let toastContainer = document.getElementById('toastContainer');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toastContainer';
                toastContainer.style.position = 'fixed';
                toastContainer.style.top = '20px';
                toastContainer.style.right = '20px';
                toastContainer.style.zIndex = '9999';
                document.body.appendChild(toastContainer);
            }

            // Create toast element
            const toast = document.createElement('div');
            toast.style.minWidth = '250px';
            toast.style.margin = '0 0 10px 0';
            toast.style.padding = '15px';
            toast.style.borderRadius = '4px';
            toast.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
            toast.style.transition = 'all 0.3s ease';
            toast.style.opacity = '0';
            toast.style.transform = 'translateY(-20px)';

            // Set background color based on type
            switch(type) {
                case 'success':
                    toast.style.backgroundColor = '#dcfce7';
                    toast.style.color = '#166534';
                    break;
                case 'error':
                    toast.style.backgroundColor = '#fee2e2';
                    toast.style.color = '#991b1b';
                    break;
                case 'warning':
                    toast.style.backgroundColor = '#fef3c7';
                    toast.style.color = '#92400e';
                    break;
                default: // info
                    toast.style.backgroundColor = '#dbeafe';
                    toast.style.color = '#1e40af';
            }

            // Set message
            toast.textContent = message;

            // Add to container
            toastContainer.appendChild(toast);

            // Animate in
            setTimeout(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateY(0)';
            }, 10);

            // Remove after 5 seconds
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateY(-20px)';
                setTimeout(() => {
                    toastContainer.removeChild(toast);
                }, 300);
            }, 5000);
        }
    </script>
}
